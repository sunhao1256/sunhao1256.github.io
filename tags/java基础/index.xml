<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java基础 on Lulu</title>
    <link>https://sunhao1256.github.io/tags/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in java基础 on Lulu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Oct 2022 15:31:00 +0800</lastBuildDate><atom:link href="https://sunhao1256.github.io/tags/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linked Block Queue</title>
      <link>https://sunhao1256.github.io/post/linked-block-queue/</link>
      <pubDate>Fri, 21 Oct 2022 15:31:00 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/linked-block-queue/</guid>
      <description>linked from https://www.cnblogs.com/tong-yuan/p/LinkedBlockingQueue.html
 属性 // 容量 private final int capacity; // 元素数量 private final AtomicInteger count = new AtomicInteger(); // 链表头 transient Node&amp;lt;E&amp;gt; head; // 链表尾 private transient Node&amp;lt;E&amp;gt; last; // take锁 private final ReentrantLock takeLock = new ReentrantLock(); // notEmpty条件 // 当队列无元素时，take锁会阻塞在notEmpty条件上，等待其它线程唤醒 private final Condition notEmpty = takeLock.newCondition(); // 放锁 private final ReentrantLock putLock = new ReentrantLock(); // notFull条件 // 当队列满了时，put锁会会阻塞在notFull上，等待其它线程唤醒 private final Condition notFull = putLock.newCondition(); （1）capacity，有容量，可以理解为LinkedBlockingQueue是有界队列</description>
    </item>
    
    <item>
      <title>Priority Queue</title>
      <link>https://sunhao1256.github.io/post/priority-queue/</link>
      <pubDate>Wed, 19 Oct 2022 15:14:41 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/priority-queue/</guid>
      <description>属性 // 默认容量 private static final int DEFAULT_INITIAL_CAPACITY = 11; // 存储元素的地方 transient Object[] queue; // non-private to simplify nested class access // 元素个数 private int size = 0; // 比较器 private final Comparator&amp;lt;? super E&amp;gt; comparator; // 修改次数 transient int modCount = 0; // non-private to simplify nested class access  （1）默认容量是11；
（2）queue，元素存储在数组中，这跟我们之前说的堆一般使用数组来存储是一致的；
（3）comparator，比较器，在优先级队列中，也有两种方式比较元素，一种是元素的自然顺序，一种是通过比较器来比较；
（4）modCount，修改次数，有这个属性表示PriorityQueue也是fast-fail的；
入队 public boolean add(E e) { return offer(e); } public boolean offer(E e) { // 不支持null元素  if (e == null) throw new NullPointerException(); modCount++; // 取size  int i = size; // 元素个数达到最大容量了，扩容  if (i &amp;gt;= queue.</description>
    </item>
    
    <item>
      <title>ConcurrentSkipListSet</title>
      <link>https://sunhao1256.github.io/post/concurrentskiplistset/</link>
      <pubDate>Tue, 18 Oct 2022 22:25:30 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/concurrentskiplistset/</guid>
      <description>源码 // 实现了NavigableSet接口，并没有所谓的ConcurrentNavigableSet接口 public class ConcurrentSkipListSet&amp;lt;E&amp;gt; extends AbstractSet&amp;lt;E&amp;gt; implements NavigableSet&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable { private static final long serialVersionUID = -2479143111061671589L; // 存储使用的map  private final ConcurrentNavigableMap&amp;lt;E,Object&amp;gt; m; // 初始化  public ConcurrentSkipListSet() { m = new ConcurrentSkipListMap&amp;lt;E,Object&amp;gt;(); } // 传入比较器  public ConcurrentSkipListSet(Comparator&amp;lt;? super E&amp;gt; comparator) { m = new ConcurrentSkipListMap&amp;lt;E,Object&amp;gt;(comparator); } // 使用ConcurrentSkipListMap初始化map  // 并将集合c中所有元素放入到map中  public ConcurrentSkipListSet(Collection&amp;lt;? extends E&amp;gt; c) { m = new ConcurrentSkipListMap&amp;lt;E,Object&amp;gt;(); addAll(c); } // 使用ConcurrentSkipListMap初始化map  // 并将有序Set中所有元素放入到map中  public ConcurrentSkipListSet(SortedSet&amp;lt;E&amp;gt; s) { m = new ConcurrentSkipListMap&amp;lt;E,Object&amp;gt;(s.</description>
    </item>
    
    <item>
      <title>LinkedHashSet</title>
      <link>https://sunhao1256.github.io/post/linkedhashset/</link>
      <pubDate>Tue, 18 Oct 2022 22:04:11 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/linkedhashset/</guid>
      <description>package java.util; // LinkedHashSet继承自HashSet public class LinkedHashSet&amp;lt;E&amp;gt; extends HashSet&amp;lt;E&amp;gt; implements Set&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable { private static final long serialVersionUID = -2851667679971038690L; // 传入容量和装载因子  public LinkedHashSet(int initialCapacity, float loadFactor) { super(initialCapacity, loadFactor, true); } // 只传入容量, 装载因子默认为0.75  public LinkedHashSet(int initialCapacity) { super(initialCapacity, .75f, true); } // 使用默认容量16, 默认装载因子0.75  public LinkedHashSet() { super(16, .75f, true); } // 将集合c中的所有元素添加到LinkedHashSet中  // 好奇怪, 这里计算容量的方式又变了  // HashSet中使用的是Math.max((int) (c.size()/.75f) + 1, 16)  // 这一点有点不得其解, 是作者偷懒？  public LinkedHashSet(Collection&amp;lt;?</description>
    </item>
    
    <item>
      <title>ConcurrentSkipListMap</title>
      <link>https://sunhao1256.github.io/post/concurrentskiplistmap/</link>
      <pubDate>Mon, 17 Oct 2022 16:22:46 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/concurrentskiplistmap/</guid>
      <description>Linked from https://www.cnblogs.com/tong-yuan/p/ConcurrentSkipListMap.html
 内部类 // 数据节点，典型的单链表结构 static final class Node&amp;lt;K,V&amp;gt; { final K key; // 注意：这里value的类型是Object，而不是V  // 在删除元素的时候value会指向当前元素本身  volatile Object value; volatile Node&amp;lt;K,V&amp;gt; next; Node(K key, Object value, Node&amp;lt;K,V&amp;gt; next) { this.key = key; this.value = value; this.next = next; } Node(Node&amp;lt;K,V&amp;gt; next) { this.key = null; this.value = this; // 当前元素本身(marker)  this.next = next; } } // 索引节点，存储着对应的node值，及向下和向右的索引指针 static class Index&amp;lt;K,V&amp;gt; { final Node&amp;lt;K,V&amp;gt; node; final Index&amp;lt;K,V&amp;gt; down; volatile Index&amp;lt;K,V&amp;gt; right; Index(Node&amp;lt;K,V&amp;gt; node, Index&amp;lt;K,V&amp;gt; down, Index&amp;lt;K,V&amp;gt; right) { this.</description>
    </item>
    
    <item>
      <title>CopyonArraySet</title>
      <link>https://sunhao1256.github.io/post/copyonarrayset/</link>
      <pubDate>Mon, 18 Oct 2021 22:16:25 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/copyonarrayset/</guid>
      <description>源码 public class CopyOnWriteArraySet&amp;lt;E&amp;gt; extends AbstractSet&amp;lt;E&amp;gt; implements java.io.Serializable { private static final long serialVersionUID = 5457747651344034263L; // 内部使用CopyOnWriteArrayList存储元素  private final CopyOnWriteArrayList&amp;lt;E&amp;gt; al; // 构造方法  public CopyOnWriteArraySet() { al = new CopyOnWriteArrayList&amp;lt;E&amp;gt;(); } // 将集合c中的元素初始化到CopyOnWriteArraySet中  public CopyOnWriteArraySet(Collection&amp;lt;? extends E&amp;gt; c) { if (c.getClass() == CopyOnWriteArraySet.class) { // 如果c是CopyOnWriteArraySet类型，说明没有重复元素，  // 直接调用CopyOnWriteArrayList的构造方法初始化  @SuppressWarnings(&amp;#34;unchecked&amp;#34;) CopyOnWriteArraySet&amp;lt;E&amp;gt; cc = (CopyOnWriteArraySet&amp;lt;E&amp;gt;)c; al = new CopyOnWriteArrayList&amp;lt;E&amp;gt;(cc.al); } else { // 如果c不是CopyOnWriteArraySet类型，说明有重复元素  // 调用CopyOnWriteArrayList的addAllAbsent()方法初始化  // 它会把重复元素排除掉  al = new CopyOnWriteArrayList&amp;lt;E&amp;gt;(); al.</description>
    </item>
    
    <item>
      <title>Hashset</title>
      <link>https://sunhao1256.github.io/post/hashset/</link>
      <pubDate>Mon, 18 Oct 2021 21:42:09 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/hashset/</guid>
      <description>属性 // 内部使用HashMap  private transient HashMap&amp;lt;E,Object&amp;gt; map; // 虚拟对象，用来作为value放到map中  private static final Object PRESENT = new Object(); 构造方法 public HashSet() { map = new HashMap&amp;lt;&amp;gt;(); } public HashSet(Collection&amp;lt;? extends E&amp;gt; c) { map = new HashMap&amp;lt;&amp;gt;(Math.max((int) (c.size()/.75f) + 1, 16)); addAll(c); } public HashSet(int initialCapacity, float loadFactor) { map = new HashMap&amp;lt;&amp;gt;(initialCapacity, loadFactor); } public HashSet(int initialCapacity) { map = new HashMap&amp;lt;&amp;gt;(initialCapacity); } // 非public，主要是给LinkedHashSet使用的 HashSet(int initialCapacity, float loadFactor, boolean dummy) { map = new LinkedHashMap&amp;lt;&amp;gt;(initialCapacity, loadFactor); } - public :表明该成员变量或者方法是对所有类或者对象都是可见的,所有类或者对象都可以直接访问 - private:表明该成员变量或者方法是私有的,只有当前类对其具有访问权限,除此之外其他类或者对象都没有访问权限.</description>
    </item>
    
    <item>
      <title>ConcurrentHashMap</title>
      <link>https://sunhao1256.github.io/post/concurrenthashmap/</link>
      <pubDate>Tue, 12 Oct 2021 21:55:51 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/concurrenthashmap/</guid>
      <description>摘自：https://www.cnblogs.com/tong-yuan/p/ConcurrentHashMap-resize.html
 简介 ConcurrentHashMap是HashMap的线程安全版本，内部也是使用（数组 + 链表 + 红黑树）的结构来存储元素。
相比于同样线程安全的HashTable来说，效率等各方面都有极大地提高。
构造函数 public ConcurrentHashMap() { } public ConcurrentHashMap(int initialCapacity) { if (initialCapacity &amp;lt; 0) throw new IllegalArgumentException(); int cap = ((initialCapacity &amp;gt;= (MAXIMUM_CAPACITY &amp;gt;&amp;gt;&amp;gt; 1)) ? MAXIMUM_CAPACITY : tableSizeFor(initialCapacity + (initialCapacity &amp;gt;&amp;gt;&amp;gt; 1) + 1)); this.sizeCtl = cap; } public ConcurrentHashMap(Map&amp;lt;? extends K, ? extends V&amp;gt; m) { this.sizeCtl = DEFAULT_CAPACITY; putAll(m); } public ConcurrentHashMap(int initialCapacity, float loadFactor) { this(initialCapacity, loadFactor, 1); } public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel) { if (!</description>
    </item>
    
    <item>
      <title>JavaCollections</title>
      <link>https://sunhao1256.github.io/post/javacollections/</link>
      <pubDate>Sun, 26 Sep 2021 21:50:07 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/javacollections/</guid>
      <description>ArrayList  ArrayList实现了List，RandomAccess，Cloneable，java.io.Serializable接口 ArrayList实现了List，实现了基础的新增，删除，遍历等操作 ArrayList实现了RandomAccess，实现了随机读写的能力 ArrayList实现了Cloneable，可以被克隆 ArrayList实现了Serializable，可以被序列化  属性解析 //默认容量 private static final int DEFAULT_CAPACITY = 10; //默认的空数组对象，当传入的容量是0的时候使用。 private static final Object[] EMPTY_ELEMENTDATA = {}; /** * 空数组，传传入容量时使用，添加第一个元素的时候会重新初始为默认容量大小 */ private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; /** * 存储元素的数组 */ transient Object[] elementData; // non-private to simplify nested class access  /** * 集合中元素的个数 */ private int size;  DEFAULT_CAPACITY：10默认容量。 EMPTY_ELEMENTDATA：当容量是0的时候，则会将目前的存对象的数组直接指向这个对象。 DEFAULTCAPACITY_EMPTY_ELEMENTDATA：为了和EMPT_ELEMENTDATA区分，EMPT_ELEMENTDATA只是单纯表示当前的List是空的，而DEFAULTCAPACITY_EMPTY_ELEMENTDATA是在调用构造函数new ArrayList()时没有传容量的话，让当前的elementData指向它，等新增第一个元素的时候，才会初始化成DEFAULT_CAPACITY大小的数组。相当于是，没有传容量，但标记他并不是一个简单的空数组，而是一个没有使用的List elementData：真正存放数据的地方，使用transient是为了不序列化这个属性。 size：ArrayList的长度，而没有使用elementData的长度  新增方法,添加到尾部 public boolean add(E e) { // 检查是否需要扩容  ensureCapacityInternal(size + 1); // 把元素插入到最后一位  elementData[size++] = e; return true; } private void ensureCapacityInternal(int minCapacity) { ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)); } private static int calculateCapacity(Object[] elementData, int minCapacity) { // 如果是空数组DEFAULTCAPACITY_EMPTY_ELEMENTDATA，就初始化为默认大小10  if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { return Math.</description>
    </item>
    
  </channel>
</rss>
