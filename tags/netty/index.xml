<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Netty on Lulu</title>
    <link>https://sunhao1256.github.io/tags/netty/</link>
    <description>Recent content in Netty on Lulu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Jan 2024 09:24:18 +0800</lastBuildDate><atom:link href="https://sunhao1256.github.io/tags/netty/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mpush</title>
      <link>https://sunhao1256.github.io/post/mpush/</link>
      <pubDate>Tue, 16 Jan 2024 09:24:18 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/mpush/</guid>
      <description>Mpush . ├── bin ├── conf ├── logs ├── mpush-api ├── mpush-boot ├── mpush-cache ├── mpush-client ├── mpush-common ├── mpush-core ├── mpush-monitor ├── mpush-netty ├── mpush-test ├── mpush-tools ├── mpush-zk └── target mpush-api mpush-api/src/main/java/com/mpush/api/ ├── common ├── connection ├── event ├── message ├── protocol ├── push ├── router ├── service ├── spi │ ├── client │ ├── common │ ├── core │ ├── handler │ ├── net │ ├── push │ └── router └── srd service mpush-api/src/main/java/com/mpush/api/service ├── BaseService.</description>
    </item>
    
    <item>
      <title>Netty</title>
      <link>https://sunhao1256.github.io/post/netty/</link>
      <pubDate>Tue, 11 Jan 2022 14:43:18 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/post/netty/</guid>
      <description>netty是在什么地方创建SeverChannel的 在BootStrap调用bind方法时创建
private ChannelFuture doBind(final SocketAddress localAddress) { final ChannelFuture regFuture = this.initAndRegister(); } initAndRegister方法
final ChannelFuture initAndRegister() { Channel channel = null; try { channel = this.channelFactory.newChannel(); channelFactory是在bootstrap配置class时实例化的
在AbstractBootstrap中
public B channel(Class&amp;lt;? extends C&amp;gt; channelClass) { return this.channelFactory((io.netty.channel.ChannelFactory)(new ReflectiveChannelFactory((Class)ObjectUtil.checkNotNull(channelClass, &amp;#34;channelClass&amp;#34;)))); } 因此是直接通过反射，创建了NioServerSocketChannel.class
public class NioServerSocketChannel extends AbstractNioMessageChannel implements ServerSocketChannel { private static final ChannelMetadata METADATA = new ChannelMetadata(false, 16); private static final SelectorProvider DEFAULT_SELECTOR_PROVIDER = SelectorProvider.provider(); private static final InternalLogger logger = InternalLoggerFactory.</description>
    </item>
    
  </channel>
</rss>
