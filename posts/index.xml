<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Hao Sun</title>
    <link>https://sunhao1256.github.io/posts/</link>
    <description>Recent content in Posts on Hao Sun</description>
    <image>
      <url>https://sunhao1256.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://sunhao1256.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 11 Jan 2022 14:43:18 +0800</lastBuildDate><atom:link href="https://sunhao1256.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>八股文</title>
      <link>https://sunhao1256.github.io/posts/%E5%85%AB%E8%82%A1%E6%96%87/</link>
      <pubDate>Tue, 11 Jan 2022 14:43:18 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/posts/%E5%85%AB%E8%82%A1%E6%96%87/</guid>
      <description>Redis redis有哪些数据结构，你用过哪些，做过什么事情   String
最简单的数据结构，用于存放字符串，实际上在redis中存放的是字符数组，类似java中的arrayList，**Redis 为了对内存做极致的优化，不同长度的字符串使用不同的结构体来表示。**Redis 规定了字符串的长度不得超过 512 MB
  List
底层用的双向列表，类似java中的LinkedList，因为是链表所有，插入删除都是O(1)，查询是O(n)
常见的命令
  lpush从头添加元素，rpush从尾添加
  lpop拿出头部的元素，rpop从尾部拿元素
索引，lpush+lpop即可实现栈，rpush+lpop可以实现队列
    Hash
对应着java中的hashMap
  Set
Redis 的集合相当于 Java 语言中的 HashSet，它内部的键值对是无序、唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值 NULL。
  Zset
它类似于 Java 中 SortedSet 和 HashMap 的结合体，一方面它是一个 set，保证了内部 value 的唯一性，另一方面它可以为每个 value 赋予一个 score 值，用来代表排序的权重。
使用场景：
 排行榜，key是用户id，value是访问次数。 限流，key是用户id+接口id，value是时间戳，每次进方法之前，拿当前时间戳-interval，删除小于now-interval的元素，算出加入当前这次请求set中的个数是否大于max，大于则限流。    BloomFilter
使用高效的数据结构解决是否存在的问题，可以解决穿透的问题
  HyperLogLog
可以用于基数的统计，例如UV统计
  redis如何做到限流的 限流的几个方式</description>
    </item>
    
    <item>
      <title>测试一张壁纸</title>
      <link>https://sunhao1256.github.io/posts/%E6%B5%8B%E8%AF%95%E4%B8%80%E5%BC%A0%E5%A3%81%E7%BA%B8/</link>
      <pubDate>Tue, 11 Jan 2022 14:06:29 +0800</pubDate>
      
      <guid>https://sunhao1256.github.io/posts/%E6%B5%8B%E8%AF%95%E4%B8%80%E5%BC%A0%E5%A3%81%E7%BA%B8/</guid>
      <description>壁纸 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://sunhao1256.github.io/posts/%E8%87%AA%E7%AD%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sunhao1256.github.io/posts/%E8%87%AA%E7%AD%94/</guid>
      <description>聊聊redis，平时你怎么用的 redis是一个高性能的缓存中间件。是一个kv的缓存数据库，他的数据都是存放在内存中的。当然他也有持久化的方案。这个等会儿说。 redis作为一个缓存数据库有他自己的数据结构，常见的有string，用于保存字符串，有最长的限制，我记得应该是512MB，List，列表数据结构类似于java中的linkedList，使用双链表，因此插入和删除复杂度是O1，查询时ON，可以重复。set类似于java中的hashset，无序，而且是不可以存放相同元素的。hash对应着java中的hashmap，经典的字典结构。zset，具有分数的set，他既是一个set，保证了value的唯一，还提供一个分数。平时可以用作排名的统计，也可以用于限流的方案。
此外redis还提供了其他的module，例如bloomfilter，布隆过滤器是使用一个位数组，用于存放大量的数据，解决的场景在于判断元素是否在大量数据中，存在误差，因为不隆过滤器就是通过多次的hash得到hash值然后放在位数组上，必然会产生冲突，只要hash次数多，数组够大，也能提高精度。如果不是分布式的项目中，可以使用google提供的gauva工具包。我们的一个常见场景，处理缓存穿透，例如查询用户信息，id根本不存在，除了在逻辑代码上处理，依然会打到数据库中，因此我们在启动项目的时候，可以将用户的id加载到不隆过滤器中，这样可以避免缓存穿透的问题。
redis除了缓存穿透，还有缓存击穿和雪崩的问题。击穿和雪崩其实两个差不多，击穿指的是某一个热点的key，在一瞬间失效过期，但是有大量的并发打这个key，导致全部打到了数据库，导致数据库挂了，对于这种··热点key，直接设置不过期就行了，然后再更新数据的时候，同时更新缓存即可。而雪崩，只的是多个key同一个时间挂了，也是并发，只不过查的东西不一样罢 了。还是一样，可以设置不过期。或者加一个随机数，保证过期时间有点差距就可以了。
说到这个缓存，其实这个缓存一致性也很重要。不管是先更新缓存，还是先更新数据库，实际上都会有问题。
首先缓存一定是删除，不可能是更新。这里其实是一个懒加载的思想，只有需要的时候，才会加入缓存。例如某个数据进缓存了，1分钟更新了10次，但访问只访问了1次，我没必要去更新10次。只有他需要的时候我才去加载一次缓存。
如果我先删除缓存，再更新数据库的话，我缓存删除完毕了，但是数据库还没更新完成，第二个请求来的时候，发现没有缓存读数据库，然后读到旧数据，并且把旧数据写到了缓存中，导致缓存一直是旧的。解决方案是，延时双删，就是当第一个线程更新完数据库的时候，进行一个sleep，并且再进行删除缓存。sleep，就是线程读数据库加写缓存的时间，估算一下即可。这样的话，再有线程来就又读新的数据库，并且进缓存了。
如果我先更新数据库，再删除缓存的话，如果我更新数据库成功了，但是缓存删除失败了，或者更新失败了，那线程读的就一直都是旧数据了。我们可以利用消息队列的重试机制，让消息队列去进行数据的更新，这中间的耗时是可以接受的。不过引入了一个消息队列，运维成本增高了。
最后对于一致性不高的，能容忍很多的，直接就给缓存设置一个过期过期时间，每次更新数据库的时候，不进行缓存删除。其实我遇到的没有这么高的并发，基本上都是删除缓存就完事了。
上面说到redis的持久化方案，redis有两种aof，和rdb。我就提一下，aof就是记录redis的命令，他是因为只是记录命令的日志，因此redis使用的顺序写，不需要进行寻址，所以效率极高，因此他能够每秒记录一次，也就是说最多丢失一秒的数据。RDB就是快照，每5分钟进行一次快照，相当于备份。RDB恢复的速度很快，AOF慢，实际情况的话，一般都是组合使用，使用RDB先恢复备份，最后再通过AOF进行补全。
redis除了提供了持久化，实际上还有主从备份，哨兵模式，还有集群，哨兵的节点主要就是监控其他redis节点的运行状态，然后当出现损坏的主节点时，重新选择新的主节点。主从备份，和mysql的主从很类似，主只进行写的动作，从节点进行读。他们之间通过psync进行数据同步，当一个节点加入的时候，会发一个psync到主节点，主节点发一个rdb快找给从节点，然后从节点加载到内存中。完成同步rdb，而期间的其他命令，都是通过buffer，也同步到从节点。
最后我再说一下redis为什么这么快吧。
首先redis是基于内存的，这就是他快的最大特点。
第二为什么redis的qps这么高，他明明是单线程的。这里要说一下，redis并不全是单线程的，一个数据分从网络传过来，再存进缓存，是两个动作，redis的单线程是在处理数据数据放进内存的时候，是单线程。为什么不使用多线程在这里呢，我们知道多线程带来的就是锁。并发等问题redis是io密集型的，cpu并不是他的瓶颈，而提高io效率的方法并不是就多线程一种方式。因此在读写缓存的时候使用的单线程。
在提升io利用率这方面，redis使用了多路复用的技术。因此redis使用的单线程去接口并发下的网络套接字，没有使用多线程，减少线程之间切换的开销，以及多线程带来的对象共享问题，因此redis被大家称为是单线程的。</description>
    </item>
    
  </channel>
</rss>
